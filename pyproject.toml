[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyncette"
version = "1.0.0"
description = "A reliable distributed scheduler with pluggable storage backends"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Tibor Djurica Potpara", email = "tibor.djurica@ojdip.net"},
]
keywords = ["scheduler", "cron", "async", "distributed", "task-queue", "asyncio"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Utilities",
]
requires-python = ">=3.9"
dependencies = [
    "croniter>=1.3.14",
    "aiosqlite>=0.19.0",
    "aiohttp>=3.8.4",
    "python-dateutil>=2.8.2",
    "coloredlogs",
]

[project.optional-dependencies]
redis = ["redis>=4.5.4"]
prometheus = ["prometheus_client>=0.16.0"]
postgres = ["asyncpg>=0.27.0"]
dynamodb = ["aioboto3>=11.1.0"]
mysql = ["aiomysql>=0.1.1", "cryptography>=40.0.2"]
uvloop = ["uvloop>=0.16.0"]
all = [
    "redis>=4.5.4",
    "prometheus_client>=0.16.0",
    "asyncpg>=0.27.0",
    "aioboto3>=11.1.0",
    "aiomysql>=0.1.1",
    "cryptography>=40.0.2",
    "uvloop>=0.22.1",
]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pre-commit",
    "ty",
    "ruff",
    "mkdocs-material",
    "mkdocstrings[python]",
]

[project.urls]
Documentation = "https://tibordp.github.io/pyncette/"
Changelog = "https://tibordp.github.io/pyncette/changelog/"
"Issue Tracker" = "https://github.com/tibordp/pyncette/issues"
Homepage = "https://github.com/tibordp/pyncette"

[tool.hatch.build.targets.wheel]
packages = ["src/pyncette"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "*.md",
    "*.cfg",
    "*.yml",
    "*.yaml",
    "*.toml",
    "*.txt",
]

[tool.ruff]
extend-exclude = ["static", "ci/templates"]
line-length = 140
src = ["src", "tests"]
target-version = "py39"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint]
ignore = [
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "PLC0415", # import not at top of file
    "S608", # SQL injection - we specifically inject table name
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ty.rules]
unresolved-attribute = "ignore"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "asyncio: mark test as async",
    "integration: mark test as integration test requiring external services",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["pyncette", "tests"]
omit = ["tests/utils/*"]
parallel = true

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "if TYPE_CHECKING:",
    "assert False",
    "pragma: no cover",
]
omit = ["*migrations*"]
